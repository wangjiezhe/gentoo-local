https://github.com/statsmodels/statsmodels/pull/9078/

diff --git a/pyproject.toml b/pyproject.toml
index 579b312bc..b41ce1326 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -2,14 +2,15 @@
 # These are strictly build requirements. Runtime requirements are listed in
 # INSTALL_REQUIRES in setup.py
 requires = [
-    "setuptools>=59.2.0",
-    "cython>=0.29.26,<3",  # Sync with CYTHON_MIN_VER in setup
+    "setuptools>=69.0.2; python_version>='3.12'",
+    "setuptools>=63.4.3",
+    "cython>=0.29.33,<4", # Sync with CYTHON_MIN_VER in setup
     # Workaround for oldest supported numpy using 1.21.6, but SciPy 1.9.2+ requiring 1.22.3+
     "oldest-supported-numpy; python_version!='3.10' or platform_system!='Windows' or platform_python_implementation=='PyPy'",
     "numpy>=1.22.3; python_version=='3.10' and platform_system=='Windows' and platform_python_implementation != 'PyPy'",
     "numpy; python_version>='3.12'",
     "scipy>=1.4",
-    "setuptools_scm[toml]~=7.0.0"
+    "setuptools_scm[toml]>=8,<9",
 ]
 build-backend = "setuptools.build_meta"
 
diff --git a/setup.py b/setup.py
index 69141b2bd..b4644ef1e 100644
--- a/setup.py
+++ b/setup.py
@@ -16,6 +16,7 @@ from pathlib import Path
 import shutil
 import sys
 
+from packaging.version import parse
 import pkg_resources
 
 SETUP_DIR = Path(__file__).parent.resolve()
@@ -26,15 +27,16 @@ try:
     FORCE_C = int(os.environ.get("SM_FORCE_C", 0))
     if FORCE_C:
         raise ImportError("Force import error for testing")
-    from Cython import Tempita
+    from Cython import Tempita, __version__ as cython_version
     from Cython.Build import cythonize
     from Cython.Distutils import build_ext
 
     HAS_CYTHON = True
+    CYTHON_3 = parse(cython_version) >= parse("3.0")
 except ImportError:
     from setuptools.command.build_ext import build_ext
 
-    HAS_CYTHON = False
+    HAS_CYTHON = CYTHON_3 = False
 
 try:
     import numpy  # noqa: F401
@@ -58,7 +60,7 @@ with open("requirements-dev.txt", encoding="utf-8") as req:
     for line in req.readlines():
         DEVELOP_REQUIRES.append(line.split("#")[0].strip())
 
-CYTHON_MIN_VER = "0.29.26"  # released 2020
+CYTHON_MIN_VER = "0.29.33"  # released January 2023
 
 EXTRAS_REQUIRE = {
     "build": ["cython>=" + CYTHON_MIN_VER],
@@ -346,6 +348,8 @@ if HAS_NUMPY:
         update_extension(extension, requires_math=requires_math)
 
 if HAS_CYTHON:
+    if CYTHON_3:
+        COMPILER_DIRECTIVES["cpow"] = True
     extensions = cythonize(
         extensions,
         compiler_directives=COMPILER_DIRECTIVES,
diff --git a/statsmodels/src/math.pxd b/statsmodels/src/math.pxd
index 9ed455526..6812e2f01 100644
--- a/statsmodels/src/math.pxd
+++ b/statsmodels/src/math.pxd
@@ -6,16 +6,16 @@ from libc.string cimport memcpy
 
 cdef extern from "numpy/npy_math.h":
     np.float64_t NPY_PI
-    np.float64_t npy_cabs(np.npy_cdouble z) nogil
-    np.npy_cdouble npy_clog(np.npy_cdouble z) nogil
-    np.npy_cdouble npy_cexp(np.npy_cdouble z) nogil
+    np.float64_t npy_cabs(np.npy_cdouble z) noexcept nogil
+    np.npy_cdouble npy_clog(np.npy_cdouble z) noexcept nogil
+    np.npy_cdouble npy_cexp(np.npy_cdouble z) noexcept nogil
 
-cdef inline np.float64_t zabs(np.complex128_t z) nogil:
+cdef inline np.float64_t zabs(np.complex128_t z) noexcept nogil:
     cdef np.npy_cdouble x
     memcpy(&x, &z, sizeof(z))
     return npy_cabs(x)
 
-cdef inline np.complex128_t zlog(np.complex128_t z) nogil:
+cdef inline np.complex128_t zlog(np.complex128_t z) noexcept nogil:
     cdef np.npy_cdouble x
     cdef np.complex128_t out
     memcpy(&x, &z, sizeof(z))
@@ -23,7 +23,7 @@ cdef inline np.complex128_t zlog(np.complex128_t z) nogil:
     memcpy(&out, &x, sizeof(x))
     return out
 
-cdef inline np.complex128_t zexp(np.complex128_t z) nogil:
+cdef inline np.complex128_t zexp(np.complex128_t z) noexcept nogil:
     cdef np.npy_cdouble x
     cdef np.complex128_t out
     memcpy(&x, &z, sizeof(z))
diff --git a/statsmodels/tsa/regime_switching/_hamilton_filter.pyx.in b/statsmodels/tsa/regime_switching/_hamilton_filter.pyx.in
index 2528eca4c..6cba3be68 100644
--- a/statsmodels/tsa/regime_switching/_hamilton_filter.pyx.in
+++ b/statsmodels/tsa/regime_switching/_hamilton_filter.pyx.in
@@ -114,7 +114,7 @@ cdef void {{prefix}}hamilton_filter_log_iteration(int t, int k_regimes, int orde
                               {{cython_type}} [:] curr_predicted_joint_probabilities,
                               {{cython_type}} [:] prev_filtered_joint_probabilities,
                               {{cython_type}} [:] curr_filtered_joint_probabilities,
-                              {{cython_type}} [:] tmp_predicted_joint_probabilities) nogil:
+                              {{cython_type}} [:] tmp_predicted_joint_probabilities) noexcept nogil:
     cdef int i, j, k, ix
     cdef:
         int k_regimes_order_m1 = k_regimes**(order - 1)
diff --git a/statsmodels/tsa/regime_switching/_kim_smoother.pyx.in b/statsmodels/tsa/regime_switching/_kim_smoother.pyx.in
index d207a627d..d42dc3377 100644
--- a/statsmodels/tsa/regime_switching/_kim_smoother.pyx.in
+++ b/statsmodels/tsa/regime_switching/_kim_smoother.pyx.in
@@ -85,7 +85,7 @@ cdef void {{prefix}}kim_smoother_log_iteration(int tt, int k_regimes, int order,
                              {{cython_type}} [:] predicted_joint_probabilities,
                              {{cython_type}} [:] filtered_joint_probabilities,
                              {{cython_type}} [:] prev_smoothed_joint_probabilities,
-                             {{cython_type}} [:] next_smoothed_joint_probabilities) nogil:
+                             {{cython_type}} [:] next_smoothed_joint_probabilities) noexcept nogil:
     cdef int t, i, j, k, ix
     cdef:
         int k_regimes_order_m1 = k_regimes**(order - 1)
diff --git a/statsmodels/tsa/statespace/tests/test_chandrasekhar.py b/statsmodels/tsa/statespace/tests/test_chandrasekhar.py
index 31d16c125..d5002dee7 100644
--- a/statsmodels/tsa/statespace/tests/test_chandrasekhar.py
+++ b/statsmodels/tsa/statespace/tests/test_chandrasekhar.py
@@ -21,7 +21,9 @@ def check_output(res_chand, res_orig, memory_conserve=False):
     params = res_orig.params
     assert_allclose(res_chand.llf, res_orig.llf)
     assert_allclose(res_chand.model.score_obs(params),
-                    res_orig.model.score_obs(params), atol=1e-10)
+                    res_orig.model.score_obs(params),
+                    rtol=5e-5,
+                    atol=5e-6)
 
     # Test state space representation matrices
     for name in res_chand.model.ssm.shapes:
