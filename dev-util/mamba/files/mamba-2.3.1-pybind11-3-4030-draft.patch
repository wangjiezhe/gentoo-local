From ff1b1b0218e4f64d9f67f22b9f66450aeae6577d Mon Sep 17 00:00:00 2001
From: Julien Jerphanion <git@jjerphan.xyz>
Date: Tue, 29 Jul 2025 11:34:35 +0200
Subject: [PATCH 1/4] maint: Support `pybind11` 3 for `libmambapy`

Signed-off-by: Julien Jerphanion <git@jjerphan.xyz>
---
 dev/environment-dev.yml                       |   2 +-
 .../src/libmambapy/bindings/bind_utils.hpp    |   5 +-
 libmambapy/src/libmambapy/bindings/legacy.cpp |  31 ++---
 .../libmambapy/bindings/solver_libsolv.cpp    |  52 +++++----
 libmambapy/src/libmambapy/bindings/specs.cpp  | 110 ++++++++++--------
 libmambapy/src/libmambapy/bindings/utils.cpp  |  62 +++++-----
 6 files changed, 149 insertions(+), 113 deletions(-)

diff --git a/dev/environment-dev.yml b/dev/environment-dev.yml
index 3c8dd5f025..2f1f9af3ad 100644
--- a/dev/environment-dev.yml
+++ b/dev/environment-dev.yml
@@ -53,7 +53,7 @@ dependencies:
   - scikit-build
   # libmambapy dependencies
   - python
-  - pybind11<3.0.0
+  - pybind11>=3.0.0
   # libmambapy-stubs build dependencies
   - mypy # For stubgen
   - setuptools
diff --git a/libmambapy/src/libmambapy/bindings/bind_utils.hpp b/libmambapy/src/libmambapy/bindings/bind_utils.hpp
index 2f3e41b6f3..a4c1a68539 100644
--- a/libmambapy/src/libmambapy/bindings/bind_utils.hpp
+++ b/libmambapy/src/libmambapy/bindings/bind_utils.hpp
@@ -15,10 +15,9 @@
 namespace mambapy
 {
     template <typename Enum>
-    auto enum_from_str(const pybind11::str& name)
+    auto enum_from_str(const pybind11::str& name, pybind11::handle enum_class)
     {
-        auto pyenum = pybind11::type::of<Enum>();
-        return pyenum.attr("__members__")[name].template cast<Enum>();
+        return enum_class.attr("__members__")[name].template cast<Enum>();
     }
 
     template <typename T>
diff --git a/libmambapy/src/libmambapy/bindings/legacy.cpp b/libmambapy/src/libmambapy/bindings/legacy.cpp
index a7234e6cca..3d4993abbe 100644
--- a/libmambapy/src/libmambapy/bindings/legacy.cpp
+++ b/libmambapy/src/libmambapy/bindings/legacy.cpp
@@ -1484,21 +1484,26 @@ bind_submodule_impl(pybind11::module_ m)
 
     ////////////////////////////////////////////
 
-    py::enum_<QueryType>(m, "QueryType")
-        .value("Search", QueryType::Search)
-        .value("Depends", QueryType::Depends)
-        .value("WhoNeeds", QueryType::WhoNeeds)
-        .def(py::init(&mambapy::enum_from_str<QueryType>))
-        .def_static("parse", &query_type_parse);
+    auto query_type_enum = py::enum_<QueryType>(m, "QueryType")
+                               .value("Search", QueryType::Search)
+                               .value("Depends", QueryType::Depends)
+                               .value("WhoNeeds", QueryType::WhoNeeds)
+                               .def_static("parse", &query_type_parse);
+    query_type_enum.def(py::init([&query_type_enum](const py::str& name)
+                                 { return mambapy::enum_from_str<QueryType>(name, query_type_enum); }
+    ));
     py::implicitly_convertible<py::str, QueryType>();
 
-    py::enum_<QueryResultFormat>(m, "QueryResultFormat")
-        .value("Json", QueryResultFormat::Json)
-        .value("Tree", QueryResultFormat::Tree)
-        .value("Table", QueryResultFormat::Table)
-        .value("Pretty", QueryResultFormat::Pretty)
-        .value("RecursiveTable", QueryResultFormat::RecursiveTable)
-        .def(py::init(&mambapy::enum_from_str<QueryResultFormat>));
+    auto query_result_format_enum = py::enum_<QueryResultFormat>(m, "QueryResultFormat")
+                                        .value("Json", QueryResultFormat::Json)
+                                        .value("Tree", QueryResultFormat::Tree)
+                                        .value("Table", QueryResultFormat::Table)
+                                        .value("Pretty", QueryResultFormat::Pretty)
+                                        .value("RecursiveTable", QueryResultFormat::RecursiveTable);
+    query_result_format_enum.def(py::init(
+        [&query_result_format_enum](const py::str& name)
+        { return mambapy::enum_from_str<QueryResultFormat>(name, query_result_format_enum); }
+    ));
     py::implicitly_convertible<py::str, QueryType>();
 
     py::class_<QueryResult>(m, "QueryResult")
diff --git a/libmambapy/src/libmambapy/bindings/solver_libsolv.cpp b/libmambapy/src/libmambapy/bindings/solver_libsolv.cpp
index 39e469559a..a77ef132c8 100644
--- a/libmambapy/src/libmambapy/bindings/solver_libsolv.cpp
+++ b/libmambapy/src/libmambapy/bindings/solver_libsolv.cpp
@@ -29,17 +29,23 @@ namespace mambapy
         using namespace mamba;
         using namespace mamba::solver::libsolv;
 
-        py::enum_<RepodataParser>(m, "RepodataParser")
-            .value("Mamba", RepodataParser::Mamba)
-            .value("Libsolv", RepodataParser::Libsolv)
-            .def(py::init(&enum_from_str<RepodataParser>));
+        auto repodata_parser_enum = py::enum_<RepodataParser>(m, "RepodataParser")
+                                        .value("Mamba", RepodataParser::Mamba)
+                                        .value("Libsolv", RepodataParser::Libsolv);
+        repodata_parser_enum.def(
+            py::init([&repodata_parser_enum](const py::str& name)
+                     { return enum_from_str<RepodataParser>(name, repodata_parser_enum); })
+        );
         py::implicitly_convertible<py::str, RepodataParser>();
 
-        py::enum_<MatchSpecParser>(m, "MatchSpecParser")
-            .value("Mixed", MatchSpecParser::Mixed)
-            .value("Mamba", MatchSpecParser::Mamba)
-            .value("Libsolv", MatchSpecParser::Libsolv)
-            .def(py::init(&enum_from_str<MatchSpecParser>));
+        auto match_spec_parser_enum = py::enum_<MatchSpecParser>(m, "MatchSpecParser")
+                                          .value("Mixed", MatchSpecParser::Mixed)
+                                          .value("Mamba", MatchSpecParser::Mamba)
+                                          .value("Libsolv", MatchSpecParser::Libsolv);
+        match_spec_parser_enum.def(
+            py::init([&match_spec_parser_enum](const py::str& name)
+                     { return enum_from_str<MatchSpecParser>(name, match_spec_parser_enum); })
+        );
         py::implicitly_convertible<py::str, MatchSpecParser>();
 
         py::enum_<PipAsPythonDependency>(m, "PipAsPythonDependency")
@@ -48,12 +54,15 @@ namespace mambapy
             .def(py::init([](bool val) { return static_cast<PipAsPythonDependency>(val); }));
         py::implicitly_convertible<py::bool_, PipAsPythonDependency>();
 
-        py::enum_<PackageTypes>(m, "PackageTypes")
-            .value("CondaOnly", PackageTypes::CondaOnly)
-            .value("TarBz2Only", PackageTypes::TarBz2Only)
-            .value("CondaAndTarBz2", PackageTypes::CondaAndTarBz2)
-            .value("CondaOrElseTarBz2", PackageTypes::CondaOrElseTarBz2)
-            .def(py::init(&enum_from_str<PackageTypes>));
+        auto package_types_enum = py::enum_<PackageTypes>(m, "PackageTypes")
+                                      .value("CondaOnly", PackageTypes::CondaOnly)
+                                      .value("TarBz2Only", PackageTypes::TarBz2Only)
+                                      .value("CondaAndTarBz2", PackageTypes::CondaAndTarBz2)
+                                      .value("CondaOrElseTarBz2", PackageTypes::CondaOrElseTarBz2);
+        package_types_enum.def(
+            py::init([&package_types_enum](const py::str& name)
+                     { return enum_from_str<PackageTypes>(name, package_types_enum); })
+        );
         py::implicitly_convertible<py::str, PackageTypes>();
 
         py::enum_<VerifyPackages>(m, "VerifyPackages")
@@ -62,12 +71,13 @@ namespace mambapy
             .def(py::init([](bool val) { return static_cast<VerifyPackages>(val); }));
         py::implicitly_convertible<py::bool_, VerifyPackages>();
 
-        py::enum_<LogLevel>(m, "LogLevel")
-            .value("Debug", LogLevel::Debug)
-            .value("Warning", LogLevel::Warning)
-            .value("Error", LogLevel::Error)
-            .value("Fatal", LogLevel::Fatal)
-            .def(py::init(&enum_from_str<LogLevel>));
+        auto log_level_enum = py::enum_<LogLevel>(m, "LogLevel")
+                                  .value("Debug", LogLevel::Debug)
+                                  .value("Warning", LogLevel::Warning)
+                                  .value("Error", LogLevel::Error)
+                                  .value("Fatal", LogLevel::Fatal);
+        log_level_enum.def(py::init([&log_level_enum](const py::str& name)
+                                    { return enum_from_str<LogLevel>(name, log_level_enum); }));
         py::implicitly_convertible<py::bool_, LogLevel>();
 
         py::class_<Priorities>(m, "Priorities")
diff --git a/libmambapy/src/libmambapy/bindings/specs.cpp b/libmambapy/src/libmambapy/bindings/specs.cpp
index a81925cbf4..4db92decfd 100644
--- a/libmambapy/src/libmambapy/bindings/specs.cpp
+++ b/libmambapy/src/libmambapy/bindings/specs.cpp
@@ -63,46 +63,53 @@ namespace mambapy
             [](const mamba::fs::u8path& p) { return strip_archive_extension(p); }
         );
 
-        py::enum_<KnownPlatform>(m, "KnownPlatform")
-            .value("noarch", KnownPlatform::noarch)
-            .value("linux_32", KnownPlatform::linux_32)
-            .value("linux_64", KnownPlatform::linux_64)
-            .value("linux_armv6l", KnownPlatform::linux_armv6l)
-            .value("linux_armv7l", KnownPlatform::linux_armv7l)
-            .value("linux_aarch64", KnownPlatform::linux_aarch64)
-            .value("linux_ppc64le", KnownPlatform::linux_ppc64le)
-            .value("linux_ppc64", KnownPlatform::linux_ppc64)
-            .value("linux_s390x", KnownPlatform::linux_s390x)
-            .value("linux_riscv32", KnownPlatform::linux_riscv32)
-            .value("linux_riscv64", KnownPlatform::linux_riscv64)
-            .value("osx_64", KnownPlatform::osx_64)
-            .value("osx_arm64", KnownPlatform::osx_arm64)
-            .value("win_32", KnownPlatform::win_32)
-            .value("win_64", KnownPlatform::win_64)
-            .value("win_arm64", KnownPlatform::win_arm64)
-            .value("zos_z", KnownPlatform::zos_z)
-            .def(py::init(&enum_from_str<KnownPlatform>))
-            .def_static("parse", &platform_parse)
-            .def_static("count", &known_platforms_count)
-            .def_static("build_platform", &build_platform);
+        auto known_platform_enum = py::enum_<KnownPlatform>(m, "KnownPlatform")
+                                       .value("noarch", KnownPlatform::noarch)
+                                       .value("linux_32", KnownPlatform::linux_32)
+                                       .value("linux_64", KnownPlatform::linux_64)
+                                       .value("linux_aarch64", KnownPlatform::linux_aarch64)
+                                       .value("linux_armv6l", KnownPlatform::linux_armv6l)
+                                       .value("linux_armv7l", KnownPlatform::linux_armv7l)
+                                       .value("linux_ppc64", KnownPlatform::linux_ppc64)
+                                       .value("linux_ppc64le", KnownPlatform::linux_ppc64le)
+                                       .value("linux_s390x", KnownPlatform::linux_s390x)
+                                       .value("linux_riscv32", KnownPlatform::linux_riscv32)
+                                       .value("linux_riscv64", KnownPlatform::linux_riscv64)
+                                       .value("osx_64", KnownPlatform::osx_64)
+                                       .value("osx_arm64", KnownPlatform::osx_arm64)
+                                       .value("win_32", KnownPlatform::win_32)
+                                       .value("win_64", KnownPlatform::win_64)
+                                       .value("win_arm64", KnownPlatform::win_arm64)
+                                       .value("zos_z", KnownPlatform::zos_z)
+                                       .def_static("parse", &platform_parse)
+                                       .def_static("count", &known_platforms_count)
+                                       .def_static("build_platform", &build_platform);
+        known_platform_enum.def(
+            py::init([&known_platform_enum](const py::str& name)
+                     { return enum_from_str<KnownPlatform>(name, known_platform_enum); })
+        );
         py::implicitly_convertible<py::str, KnownPlatform>();
 
-        py::enum_<NoArchType>(m, "NoArchType")
-            .value("No", NoArchType::No)
-            .value("Generic", NoArchType::Generic)
-            .value("Python", NoArchType::Python)
-            .def(py::init(&enum_from_str<NoArchType>))
-            .def_static("parse", &noarch_parse)
-            .def_static("count", &known_noarch_count);
+        auto noarch_type_enum = py::enum_<NoArchType>(m, "NoArchType")
+                                    .value("No", NoArchType::No)
+                                    .value("Generic", NoArchType::Generic)
+                                    .value("Python", NoArchType::Python)
+                                    .def_static("parse", &noarch_parse)
+                                    .def_static("count", &known_noarch_count);
+        noarch_type_enum.def(py::init([&noarch_type_enum](const py::str& name)
+                                      { return enum_from_str<NoArchType>(name, noarch_type_enum); }));
         py::implicitly_convertible<py::str, NoArchType>();
 
         auto py_conda_url = py::class_<CondaURL>(m, "CondaURL");
 
-        py::enum_<CondaURL::Credentials>(py_conda_url, "Credentials")
-            .value("Hide", CondaURL::Credentials::Hide)
-            .value("Show", CondaURL::Credentials::Show)
-            .value("Remove", CondaURL::Credentials::Remove)
-            .def(py::init(&enum_from_str<CondaURL::Credentials>));
+        auto conda_url_credentials_enum = py::enum_<CondaURL::Credentials>(py_conda_url, "Credentials")
+                                              .value("Hide", CondaURL::Credentials::Hide)
+                                              .value("Show", CondaURL::Credentials::Show)
+                                              .value("Remove", CondaURL::Credentials::Remove);
+        conda_url_credentials_enum.def(py::init(
+            [&conda_url_credentials_enum](const py::str& name)
+            { return enum_from_str<CondaURL::Credentials>(name, conda_url_credentials_enum); }
+        ));
         py::implicitly_convertible<py::str, CondaURL::Credentials>();
 
         py_conda_url  //
@@ -315,14 +322,20 @@ namespace mambapy
 
         auto py_unresolved_channel = py::class_<UnresolvedChannel>(m, "UnresolvedChannel");
 
-        py::enum_<UnresolvedChannel::Type>(py_unresolved_channel, "Type")
-            .value("URL", UnresolvedChannel::Type::URL)
-            .value("PackageURL", UnresolvedChannel::Type::PackageURL)
-            .value("Path", UnresolvedChannel::Type::Path)
-            .value("PackagePath", UnresolvedChannel::Type::PackagePath)
-            .value("Name", UnresolvedChannel::Type::Name)
-            .value("Unknown", UnresolvedChannel::Type::Unknown)
-            .def(py::init(&enum_from_str<UnresolvedChannel::Type>));
+        auto unresolved_channel_type_enum = py::enum_<UnresolvedChannel::Type>(
+                                                py_unresolved_channel,
+                                                "Type"
+        )
+                                                .value("URL", UnresolvedChannel::Type::URL)
+                                                .value("PackageURL", UnresolvedChannel::Type::PackageURL)
+                                                .value("Path", UnresolvedChannel::Type::Path)
+                                                .value("PackagePath", UnresolvedChannel::Type::PackagePath)
+                                                .value("Name", UnresolvedChannel::Type::Name)
+                                                .value("Unknown", UnresolvedChannel::Type::Unknown);
+        unresolved_channel_type_enum.def(py::init(
+            [&unresolved_channel_type_enum](const py::str& name)
+            { return enum_from_str<UnresolvedChannel::Type>(name, unresolved_channel_type_enum); }
+        ));
         py::implicitly_convertible<py::str, UnresolvedChannel::Type>();
 
         py_unresolved_channel  //
@@ -436,11 +449,14 @@ namespace mambapy
             .def("__copy__", &copy<BasicHTTPAuthentication>)
             .def("__deepcopy__", &deepcopy<BasicHTTPAuthentication>, py::arg("memo"));
 
-        py::enum_<Channel::Match>(py_channel, "Match")
-            .value("No", Channel::Match::No)
-            .value("InOtherPlatform", Channel::Match::InOtherPlatform)
-            .value("Full", Channel::Match::Full)
-            .def(py::init(&enum_from_str<Channel::Match>));
+        auto channel_match_enum = py::enum_<Channel::Match>(py_channel, "Match")
+                                      .value("No", Channel::Match::No)
+                                      .value("InOtherPlatform", Channel::Match::InOtherPlatform)
+                                      .value("Full", Channel::Match::Full);
+        channel_match_enum.def(
+            py::init([&channel_match_enum](const py::str& name)
+                     { return enum_from_str<Channel::Match>(name, channel_match_enum); })
+        );
         py::implicitly_convertible<py::str, Channel::Match>();
 
         py_channel  //
diff --git a/libmambapy/src/libmambapy/bindings/utils.cpp b/libmambapy/src/libmambapy/bindings/utils.cpp
index e7aa324da6..0ae1fe9faf 100644
--- a/libmambapy/src/libmambapy/bindings/utils.cpp
+++ b/libmambapy/src/libmambapy/bindings/utils.cpp
@@ -57,36 +57,42 @@ namespace mambapy
     {
         namespace py = pybind11;
 
-        py::enum_<fmt::emphasis>(m, "TextEmphasis")
-            .value("Bold", fmt::emphasis::bold)
-            .value("Faint", fmt::emphasis::faint)
-            .value("Italic", fmt::emphasis::italic)
-            .value("Underline", fmt::emphasis::underline)
-            .value("Blink", fmt::emphasis::blink)
-            .value("Reverse", fmt::emphasis::reverse)
-            .value("Conceal", fmt::emphasis::conceal)
-            .value("Strikethrough", fmt::emphasis::strikethrough)
-            .def(py::init(&enum_from_str<fmt::emphasis>));
+        auto text_emphasis_enum = py::enum_<fmt::emphasis>(m, "TextEmphasis")
+                                      .value("Bold", fmt::emphasis::bold)
+                                      .value("Faint", fmt::emphasis::faint)
+                                      .value("Italic", fmt::emphasis::italic)
+                                      .value("Underline", fmt::emphasis::underline)
+                                      .value("Blink", fmt::emphasis::blink)
+                                      .value("Reverse", fmt::emphasis::reverse)
+                                      .value("Conceal", fmt::emphasis::conceal)
+                                      .value("Strikethrough", fmt::emphasis::strikethrough);
+        text_emphasis_enum.def(
+            py::init([&text_emphasis_enum](const py::str& name)
+                     { return enum_from_str<fmt::emphasis>(name, text_emphasis_enum); })
+        );
         py::implicitly_convertible<py::str, fmt::emphasis>();
 
-        py::enum_<fmt::terminal_color>(m, "TextTerminalColor")
-            .value("Black", fmt::terminal_color::black)
-            .value("Red", fmt::terminal_color::red)
-            .value("Green", fmt::terminal_color::green)
-            .value("Yellow", fmt::terminal_color::yellow)
-            .value("Blue", fmt::terminal_color::blue)
-            .value("Magenta", fmt::terminal_color::magenta)
-            .value("Cyan", fmt::terminal_color::cyan)
-            .value("White", fmt::terminal_color::white)
-            .value("BrightBlack", fmt::terminal_color::bright_black)
-            .value("BrightRed", fmt::terminal_color::bright_red)
-            .value("BrightGreen", fmt::terminal_color::bright_green)
-            .value("BrightYellow", fmt::terminal_color::bright_yellow)
-            .value("BrightBlue", fmt::terminal_color::bright_blue)
-            .value("BrightMagenta", fmt::terminal_color::bright_magenta)
-            .value("BrightCyan", fmt::terminal_color::bright_cyan)
-            .value("BrightWhite", fmt::terminal_color::bright_white)
-            .def(py::init(&enum_from_str<fmt::terminal_color>));
+        auto text_terminal_color_enum = py::enum_<fmt::terminal_color>(m, "TextTerminalColor")
+                                            .value("Black", fmt::terminal_color::black)
+                                            .value("Red", fmt::terminal_color::red)
+                                            .value("Green", fmt::terminal_color::green)
+                                            .value("Yellow", fmt::terminal_color::yellow)
+                                            .value("Blue", fmt::terminal_color::blue)
+                                            .value("Magenta", fmt::terminal_color::magenta)
+                                            .value("Cyan", fmt::terminal_color::cyan)
+                                            .value("White", fmt::terminal_color::white)
+                                            .value("BrightBlack", fmt::terminal_color::bright_black)
+                                            .value("BrightRed", fmt::terminal_color::bright_red)
+                                            .value("BrightGreen", fmt::terminal_color::bright_green)
+                                            .value("BrightYellow", fmt::terminal_color::bright_yellow)
+                                            .value("BrightBlue", fmt::terminal_color::bright_blue)
+                                            .value("BrightMagenta", fmt::terminal_color::bright_magenta)
+                                            .value("BrightCyan", fmt::terminal_color::bright_cyan)
+                                            .value("BrightWhite", fmt::terminal_color::bright_white);
+        text_terminal_color_enum.def(
+            py::init([&text_terminal_color_enum](const py::str& name)
+                     { return enum_from_str<fmt::terminal_color>(name, text_terminal_color_enum); })
+        );
         py::implicitly_convertible<py::str, fmt::terminal_color>();
 
         py::class_<fmt::rgb>(m, "TextRGBColor")

From b3e7122a8943a84c57fc0ab327331b47ec73c9e1 Mon Sep 17 00:00:00 2001
From: Julien Jerphanion <git@jjerphan.xyz>
Date: Tue, 5 Aug 2025 10:34:09 +0200
Subject: [PATCH 2/4] Capture enum classes handle by value

Signed-off-by: Julien Jerphanion <git@jjerphan.xyz>
---
 libmambapy/src/libmambapy/bindings/legacy.cpp         |  4 ++--
 libmambapy/src/libmambapy/bindings/solver_libsolv.cpp |  8 ++++----
 libmambapy/src/libmambapy/bindings/specs.cpp          | 10 +++++-----
 libmambapy/src/libmambapy/bindings/utils.cpp          |  4 ++--
 4 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/libmambapy/src/libmambapy/bindings/legacy.cpp b/libmambapy/src/libmambapy/bindings/legacy.cpp
index 3d4993abbe..95f98849a8 100644
--- a/libmambapy/src/libmambapy/bindings/legacy.cpp
+++ b/libmambapy/src/libmambapy/bindings/legacy.cpp
@@ -1489,7 +1489,7 @@ bind_submodule_impl(pybind11::module_ m)
                                .value("Depends", QueryType::Depends)
                                .value("WhoNeeds", QueryType::WhoNeeds)
                                .def_static("parse", &query_type_parse);
-    query_type_enum.def(py::init([&query_type_enum](const py::str& name)
+    query_type_enum.def(py::init([query_type_enum](const py::str& name)
                                  { return mambapy::enum_from_str<QueryType>(name, query_type_enum); }
     ));
     py::implicitly_convertible<py::str, QueryType>();
@@ -1501,7 +1501,7 @@ bind_submodule_impl(pybind11::module_ m)
                                         .value("Pretty", QueryResultFormat::Pretty)
                                         .value("RecursiveTable", QueryResultFormat::RecursiveTable);
     query_result_format_enum.def(py::init(
-        [&query_result_format_enum](const py::str& name)
+        [query_result_format_enum](const py::str& name)
         { return mambapy::enum_from_str<QueryResultFormat>(name, query_result_format_enum); }
     ));
     py::implicitly_convertible<py::str, QueryType>();
diff --git a/libmambapy/src/libmambapy/bindings/solver_libsolv.cpp b/libmambapy/src/libmambapy/bindings/solver_libsolv.cpp
index a77ef132c8..27765573f3 100644
--- a/libmambapy/src/libmambapy/bindings/solver_libsolv.cpp
+++ b/libmambapy/src/libmambapy/bindings/solver_libsolv.cpp
@@ -33,7 +33,7 @@ namespace mambapy
                                         .value("Mamba", RepodataParser::Mamba)
                                         .value("Libsolv", RepodataParser::Libsolv);
         repodata_parser_enum.def(
-            py::init([&repodata_parser_enum](const py::str& name)
+            py::init([repodata_parser_enum](const py::str& name)
                      { return enum_from_str<RepodataParser>(name, repodata_parser_enum); })
         );
         py::implicitly_convertible<py::str, RepodataParser>();
@@ -43,7 +43,7 @@ namespace mambapy
                                           .value("Mamba", MatchSpecParser::Mamba)
                                           .value("Libsolv", MatchSpecParser::Libsolv);
         match_spec_parser_enum.def(
-            py::init([&match_spec_parser_enum](const py::str& name)
+            py::init([match_spec_parser_enum](const py::str& name)
                      { return enum_from_str<MatchSpecParser>(name, match_spec_parser_enum); })
         );
         py::implicitly_convertible<py::str, MatchSpecParser>();
@@ -60,7 +60,7 @@ namespace mambapy
                                       .value("CondaAndTarBz2", PackageTypes::CondaAndTarBz2)
                                       .value("CondaOrElseTarBz2", PackageTypes::CondaOrElseTarBz2);
         package_types_enum.def(
-            py::init([&package_types_enum](const py::str& name)
+            py::init([package_types_enum](const py::str& name)
                      { return enum_from_str<PackageTypes>(name, package_types_enum); })
         );
         py::implicitly_convertible<py::str, PackageTypes>();
@@ -76,7 +76,7 @@ namespace mambapy
                                   .value("Warning", LogLevel::Warning)
                                   .value("Error", LogLevel::Error)
                                   .value("Fatal", LogLevel::Fatal);
-        log_level_enum.def(py::init([&log_level_enum](const py::str& name)
+        log_level_enum.def(py::init([log_level_enum](const py::str& name)
                                     { return enum_from_str<LogLevel>(name, log_level_enum); }));
         py::implicitly_convertible<py::bool_, LogLevel>();
 
diff --git a/libmambapy/src/libmambapy/bindings/specs.cpp b/libmambapy/src/libmambapy/bindings/specs.cpp
index 4db92decfd..cf1ab58f23 100644
--- a/libmambapy/src/libmambapy/bindings/specs.cpp
+++ b/libmambapy/src/libmambapy/bindings/specs.cpp
@@ -85,7 +85,7 @@ namespace mambapy
                                        .def_static("count", &known_platforms_count)
                                        .def_static("build_platform", &build_platform);
         known_platform_enum.def(
-            py::init([&known_platform_enum](const py::str& name)
+            py::init([known_platform_enum](const py::str& name)
                      { return enum_from_str<KnownPlatform>(name, known_platform_enum); })
         );
         py::implicitly_convertible<py::str, KnownPlatform>();
@@ -96,7 +96,7 @@ namespace mambapy
                                     .value("Python", NoArchType::Python)
                                     .def_static("parse", &noarch_parse)
                                     .def_static("count", &known_noarch_count);
-        noarch_type_enum.def(py::init([&noarch_type_enum](const py::str& name)
+        noarch_type_enum.def(py::init([noarch_type_enum](const py::str& name)
                                       { return enum_from_str<NoArchType>(name, noarch_type_enum); }));
         py::implicitly_convertible<py::str, NoArchType>();
 
@@ -107,7 +107,7 @@ namespace mambapy
                                               .value("Show", CondaURL::Credentials::Show)
                                               .value("Remove", CondaURL::Credentials::Remove);
         conda_url_credentials_enum.def(py::init(
-            [&conda_url_credentials_enum](const py::str& name)
+            [conda_url_credentials_enum](const py::str& name)
             { return enum_from_str<CondaURL::Credentials>(name, conda_url_credentials_enum); }
         ));
         py::implicitly_convertible<py::str, CondaURL::Credentials>();
@@ -333,7 +333,7 @@ namespace mambapy
                                                 .value("Name", UnresolvedChannel::Type::Name)
                                                 .value("Unknown", UnresolvedChannel::Type::Unknown);
         unresolved_channel_type_enum.def(py::init(
-            [&unresolved_channel_type_enum](const py::str& name)
+            [unresolved_channel_type_enum](const py::str& name)
             { return enum_from_str<UnresolvedChannel::Type>(name, unresolved_channel_type_enum); }
         ));
         py::implicitly_convertible<py::str, UnresolvedChannel::Type>();
@@ -454,7 +454,7 @@ namespace mambapy
                                       .value("InOtherPlatform", Channel::Match::InOtherPlatform)
                                       .value("Full", Channel::Match::Full);
         channel_match_enum.def(
-            py::init([&channel_match_enum](const py::str& name)
+            py::init([channel_match_enum](const py::str& name)
                      { return enum_from_str<Channel::Match>(name, channel_match_enum); })
         );
         py::implicitly_convertible<py::str, Channel::Match>();
diff --git a/libmambapy/src/libmambapy/bindings/utils.cpp b/libmambapy/src/libmambapy/bindings/utils.cpp
index 0ae1fe9faf..e142588c35 100644
--- a/libmambapy/src/libmambapy/bindings/utils.cpp
+++ b/libmambapy/src/libmambapy/bindings/utils.cpp
@@ -67,7 +67,7 @@ namespace mambapy
                                       .value("Conceal", fmt::emphasis::conceal)
                                       .value("Strikethrough", fmt::emphasis::strikethrough);
         text_emphasis_enum.def(
-            py::init([&text_emphasis_enum](const py::str& name)
+            py::init([text_emphasis_enum](const py::str& name)
                      { return enum_from_str<fmt::emphasis>(name, text_emphasis_enum); })
         );
         py::implicitly_convertible<py::str, fmt::emphasis>();
@@ -90,7 +90,7 @@ namespace mambapy
                                             .value("BrightCyan", fmt::terminal_color::bright_cyan)
                                             .value("BrightWhite", fmt::terminal_color::bright_white);
         text_terminal_color_enum.def(
-            py::init([&text_terminal_color_enum](const py::str& name)
+            py::init([text_terminal_color_enum](const py::str& name)
                      { return enum_from_str<fmt::terminal_color>(name, text_terminal_color_enum); })
         );
         py::implicitly_convertible<py::str, fmt::terminal_color>();

From 61f4feec0818e42fb649858944cc7c99da4615cf Mon Sep 17 00:00:00 2001
From: Julien Jerphanion <git@jjerphan.xyz>
Date: Wed, 6 Aug 2025 14:50:50 +0200
Subject: [PATCH 3/4] Use `py::native_enum` over `py::enum_`

And bind static methods differently.

Signed-off-by: Julien Jerphanion <git@jjerphan.xyz>
---
 .../src/libmambapy/bindings/bind_utils.hpp    |   6 -
 libmambapy/src/libmambapy/bindings/legacy.cpp |  37 +++---
 .../libmambapy/bindings/solver_libsolv.cpp    |  67 +++++-----
 libmambapy/src/libmambapy/bindings/specs.cpp  | 118 ++++++++----------
 libmambapy/src/libmambapy/bindings/utils.cpp  |  65 +++++-----
 5 files changed, 136 insertions(+), 157 deletions(-)

diff --git a/libmambapy/src/libmambapy/bindings/bind_utils.hpp b/libmambapy/src/libmambapy/bindings/bind_utils.hpp
index a4c1a68539..02854cc649 100644
--- a/libmambapy/src/libmambapy/bindings/bind_utils.hpp
+++ b/libmambapy/src/libmambapy/bindings/bind_utils.hpp
@@ -14,12 +14,6 @@
 
 namespace mambapy
 {
-    template <typename Enum>
-    auto enum_from_str(const pybind11::str& name, pybind11::handle enum_class)
-    {
-        return enum_class.attr("__members__")[name].template cast<Enum>();
-    }
-
     template <typename T>
     auto copy(const T& x) -> std::unique_ptr<T>
     {
diff --git a/libmambapy/src/libmambapy/bindings/legacy.cpp b/libmambapy/src/libmambapy/bindings/legacy.cpp
index 95f98849a8..c054927a1a 100644
--- a/libmambapy/src/libmambapy/bindings/legacy.cpp
+++ b/libmambapy/src/libmambapy/bindings/legacy.cpp
@@ -10,6 +10,7 @@
 #include <nlohmann/json.hpp>
 #include <pybind11/functional.h>
 #include <pybind11/iostream.h>
+#include <pybind11/native_enum.h>
 #include <pybind11/operators.h>
 #include <pybind11/pybind11.h>
 #include <pybind11/stl.h>
@@ -1484,27 +1485,25 @@ bind_submodule_impl(pybind11::module_ m)
 
     ////////////////////////////////////////////
 
-    auto query_type_enum = py::enum_<QueryType>(m, "QueryType")
-                               .value("Search", QueryType::Search)
-                               .value("Depends", QueryType::Depends)
-                               .value("WhoNeeds", QueryType::WhoNeeds)
-                               .def_static("parse", &query_type_parse);
-    query_type_enum.def(py::init([query_type_enum](const py::str& name)
-                                 { return mambapy::enum_from_str<QueryType>(name, query_type_enum); }
-    ));
+    py::native_enum<QueryType>(m, "QueryType", "enum.Enum")
+        .value("Search", QueryType::Search)
+        .value("Depends", QueryType::Depends)
+        .value("WhoNeeds", QueryType::WhoNeeds)
+        .export_values()
+        .finalize();
     py::implicitly_convertible<py::str, QueryType>();
 
-    auto query_result_format_enum = py::enum_<QueryResultFormat>(m, "QueryResultFormat")
-                                        .value("Json", QueryResultFormat::Json)
-                                        .value("Tree", QueryResultFormat::Tree)
-                                        .value("Table", QueryResultFormat::Table)
-                                        .value("Pretty", QueryResultFormat::Pretty)
-                                        .value("RecursiveTable", QueryResultFormat::RecursiveTable);
-    query_result_format_enum.def(py::init(
-        [query_result_format_enum](const py::str& name)
-        { return mambapy::enum_from_str<QueryResultFormat>(name, query_result_format_enum); }
-    ));
-    py::implicitly_convertible<py::str, QueryType>();
+    m.def("query_type_parse", &query_type_parse);
+
+    py::native_enum<QueryResultFormat>(m, "QueryResultFormat", "enum.Enum")
+        .value("Json", QueryResultFormat::Json)
+        .value("Tree", QueryResultFormat::Tree)
+        .value("Table", QueryResultFormat::Table)
+        .value("Pretty", QueryResultFormat::Pretty)
+        .value("RecursiveTable", QueryResultFormat::RecursiveTable)
+        .export_values()
+        .finalize();
+    py::implicitly_convertible<py::str, QueryResultFormat>();
 
     py::class_<QueryResult>(m, "QueryResult")
         .def_property_readonly("type", &QueryResult::type)
diff --git a/libmambapy/src/libmambapy/bindings/solver_libsolv.cpp b/libmambapy/src/libmambapy/bindings/solver_libsolv.cpp
index 27765573f3..de46674a22 100644
--- a/libmambapy/src/libmambapy/bindings/solver_libsolv.cpp
+++ b/libmambapy/src/libmambapy/bindings/solver_libsolv.cpp
@@ -7,6 +7,7 @@
 #include <ranges>
 
 #include <pybind11/functional.h>
+#include <pybind11/native_enum.h>
 #include <pybind11/operators.h>
 #include <pybind11/pybind11.h>
 
@@ -29,55 +30,51 @@ namespace mambapy
         using namespace mamba;
         using namespace mamba::solver::libsolv;
 
-        auto repodata_parser_enum = py::enum_<RepodataParser>(m, "RepodataParser")
-                                        .value("Mamba", RepodataParser::Mamba)
-                                        .value("Libsolv", RepodataParser::Libsolv);
-        repodata_parser_enum.def(
-            py::init([repodata_parser_enum](const py::str& name)
-                     { return enum_from_str<RepodataParser>(name, repodata_parser_enum); })
-        );
+        py::native_enum<RepodataParser>(m, "RepodataParser", "enum.Enum")
+            .value("Mamba", RepodataParser::Mamba)
+            .value("Libsolv", RepodataParser::Libsolv)
+            .export_values()
+            .finalize();
         py::implicitly_convertible<py::str, RepodataParser>();
 
-        auto match_spec_parser_enum = py::enum_<MatchSpecParser>(m, "MatchSpecParser")
-                                          .value("Mixed", MatchSpecParser::Mixed)
-                                          .value("Mamba", MatchSpecParser::Mamba)
-                                          .value("Libsolv", MatchSpecParser::Libsolv);
-        match_spec_parser_enum.def(
-            py::init([match_spec_parser_enum](const py::str& name)
-                     { return enum_from_str<MatchSpecParser>(name, match_spec_parser_enum); })
-        );
+        py::native_enum<MatchSpecParser>(m, "MatchSpecParser", "enum.Enum")
+            .value("Mixed", MatchSpecParser::Mixed)
+            .value("Mamba", MatchSpecParser::Mamba)
+            .value("Libsolv", MatchSpecParser::Libsolv)
+            .export_values()
+            .finalize();
         py::implicitly_convertible<py::str, MatchSpecParser>();
 
-        py::enum_<PipAsPythonDependency>(m, "PipAsPythonDependency")
+        py::native_enum<PipAsPythonDependency>(m, "PipAsPythonDependency", "enum.Enum")
             .value("No", PipAsPythonDependency::No)
             .value("Yes", PipAsPythonDependency::Yes)
-            .def(py::init([](bool val) { return static_cast<PipAsPythonDependency>(val); }));
+            .export_values()
+            .finalize();
         py::implicitly_convertible<py::bool_, PipAsPythonDependency>();
 
-        auto package_types_enum = py::enum_<PackageTypes>(m, "PackageTypes")
-                                      .value("CondaOnly", PackageTypes::CondaOnly)
-                                      .value("TarBz2Only", PackageTypes::TarBz2Only)
-                                      .value("CondaAndTarBz2", PackageTypes::CondaAndTarBz2)
-                                      .value("CondaOrElseTarBz2", PackageTypes::CondaOrElseTarBz2);
-        package_types_enum.def(
-            py::init([package_types_enum](const py::str& name)
-                     { return enum_from_str<PackageTypes>(name, package_types_enum); })
-        );
+        py::native_enum<PackageTypes>(m, "PackageTypes", "enum.Enum")
+            .value("CondaOnly", PackageTypes::CondaOnly)
+            .value("TarBz2Only", PackageTypes::TarBz2Only)
+            .value("CondaAndTarBz2", PackageTypes::CondaAndTarBz2)
+            .value("CondaOrElseTarBz2", PackageTypes::CondaOrElseTarBz2)
+            .export_values()
+            .finalize();
         py::implicitly_convertible<py::str, PackageTypes>();
 
-        py::enum_<VerifyPackages>(m, "VerifyPackages")
+        py::native_enum<VerifyPackages>(m, "VerifyPackages", "enum.Enum")
             .value("No", VerifyPackages::No)
             .value("Yes", VerifyPackages::Yes)
-            .def(py::init([](bool val) { return static_cast<VerifyPackages>(val); }));
+            .export_values()
+            .finalize();
         py::implicitly_convertible<py::bool_, VerifyPackages>();
 
-        auto log_level_enum = py::enum_<LogLevel>(m, "LogLevel")
-                                  .value("Debug", LogLevel::Debug)
-                                  .value("Warning", LogLevel::Warning)
-                                  .value("Error", LogLevel::Error)
-                                  .value("Fatal", LogLevel::Fatal);
-        log_level_enum.def(py::init([log_level_enum](const py::str& name)
-                                    { return enum_from_str<LogLevel>(name, log_level_enum); }));
+        py::native_enum<LogLevel>(m, "LogLevel", "enum.Enum")
+            .value("Debug", LogLevel::Debug)
+            .value("Warning", LogLevel::Warning)
+            .value("Error", LogLevel::Error)
+            .value("Fatal", LogLevel::Fatal)
+            .export_values()
+            .finalize();
         py::implicitly_convertible<py::bool_, LogLevel>();
 
         py::class_<Priorities>(m, "Priorities")
diff --git a/libmambapy/src/libmambapy/bindings/specs.cpp b/libmambapy/src/libmambapy/bindings/specs.cpp
index cf1ab58f23..6c08ee114a 100644
--- a/libmambapy/src/libmambapy/bindings/specs.cpp
+++ b/libmambapy/src/libmambapy/bindings/specs.cpp
@@ -4,6 +4,7 @@
 //
 // The full license is in the file LICENSE, distributed with this software.
 
+#include <pybind11/native_enum.h>
 #include <pybind11/operators.h>
 #include <pybind11/pybind11.h>
 #include <pybind11/stl_bind.h>
@@ -63,53 +64,51 @@ namespace mambapy
             [](const mamba::fs::u8path& p) { return strip_archive_extension(p); }
         );
 
-        auto known_platform_enum = py::enum_<KnownPlatform>(m, "KnownPlatform")
-                                       .value("noarch", KnownPlatform::noarch)
-                                       .value("linux_32", KnownPlatform::linux_32)
-                                       .value("linux_64", KnownPlatform::linux_64)
-                                       .value("linux_aarch64", KnownPlatform::linux_aarch64)
-                                       .value("linux_armv6l", KnownPlatform::linux_armv6l)
-                                       .value("linux_armv7l", KnownPlatform::linux_armv7l)
-                                       .value("linux_ppc64", KnownPlatform::linux_ppc64)
-                                       .value("linux_ppc64le", KnownPlatform::linux_ppc64le)
-                                       .value("linux_s390x", KnownPlatform::linux_s390x)
-                                       .value("linux_riscv32", KnownPlatform::linux_riscv32)
-                                       .value("linux_riscv64", KnownPlatform::linux_riscv64)
-                                       .value("osx_64", KnownPlatform::osx_64)
-                                       .value("osx_arm64", KnownPlatform::osx_arm64)
-                                       .value("win_32", KnownPlatform::win_32)
-                                       .value("win_64", KnownPlatform::win_64)
-                                       .value("win_arm64", KnownPlatform::win_arm64)
-                                       .value("zos_z", KnownPlatform::zos_z)
-                                       .def_static("parse", &platform_parse)
-                                       .def_static("count", &known_platforms_count)
-                                       .def_static("build_platform", &build_platform);
-        known_platform_enum.def(
-            py::init([known_platform_enum](const py::str& name)
-                     { return enum_from_str<KnownPlatform>(name, known_platform_enum); })
-        );
+        py::native_enum<KnownPlatform>(m, "KnownPlatform", "enum.Enum")
+            .value("noarch", KnownPlatform::noarch)
+            .value("linux_32", KnownPlatform::linux_32)
+            .value("linux_64", KnownPlatform::linux_64)
+            .value("linux_aarch64", KnownPlatform::linux_aarch64)
+            .value("linux_armv6l", KnownPlatform::linux_armv6l)
+            .value("linux_armv7l", KnownPlatform::linux_armv7l)
+            .value("linux_ppc64", KnownPlatform::linux_ppc64)
+            .value("linux_ppc64le", KnownPlatform::linux_ppc64le)
+            .value("linux_s390x", KnownPlatform::linux_s390x)
+            .value("linux_riscv32", KnownPlatform::linux_riscv32)
+            .value("linux_riscv64", KnownPlatform::linux_riscv64)
+            .value("osx_64", KnownPlatform::osx_64)
+            .value("osx_arm64", KnownPlatform::osx_arm64)
+            .value("win_32", KnownPlatform::win_32)
+            .value("win_64", KnownPlatform::win_64)
+            .value("win_arm64", KnownPlatform::win_arm64)
+            .value("zos_z", KnownPlatform::zos_z)
+            .export_values()
+            .finalize();
         py::implicitly_convertible<py::str, KnownPlatform>();
 
-        auto noarch_type_enum = py::enum_<NoArchType>(m, "NoArchType")
-                                    .value("No", NoArchType::No)
-                                    .value("Generic", NoArchType::Generic)
-                                    .value("Python", NoArchType::Python)
-                                    .def_static("parse", &noarch_parse)
-                                    .def_static("count", &known_noarch_count);
-        noarch_type_enum.def(py::init([noarch_type_enum](const py::str& name)
-                                      { return enum_from_str<NoArchType>(name, noarch_type_enum); }));
+        m.def("platform_parse", &platform_parse);
+        m.def("known_platforms_count", &known_platforms_count);
+        m.def("build_platform", &build_platform);
+
+        py::native_enum<NoArchType>(m, "NoArchType", "enum.Enum")
+            .value("No", NoArchType::No)
+            .value("Generic", NoArchType::Generic)
+            .value("Python", NoArchType::Python)
+            .export_values()
+            .finalize();
         py::implicitly_convertible<py::str, NoArchType>();
 
+        m.def("noarch_parse", &noarch_parse);
+        m.def("known_noarch_count", &known_noarch_count);
+
         auto py_conda_url = py::class_<CondaURL>(m, "CondaURL");
 
-        auto conda_url_credentials_enum = py::enum_<CondaURL::Credentials>(py_conda_url, "Credentials")
-                                              .value("Hide", CondaURL::Credentials::Hide)
-                                              .value("Show", CondaURL::Credentials::Show)
-                                              .value("Remove", CondaURL::Credentials::Remove);
-        conda_url_credentials_enum.def(py::init(
-            [conda_url_credentials_enum](const py::str& name)
-            { return enum_from_str<CondaURL::Credentials>(name, conda_url_credentials_enum); }
-        ));
+        py::native_enum<CondaURL::Credentials>(py_conda_url, "Credentials", "enum.Enum")
+            .value("Hide", CondaURL::Credentials::Hide)
+            .value("Show", CondaURL::Credentials::Show)
+            .value("Remove", CondaURL::Credentials::Remove)
+            .export_values()
+            .finalize();
         py::implicitly_convertible<py::str, CondaURL::Credentials>();
 
         py_conda_url  //
@@ -322,20 +321,15 @@ namespace mambapy
 
         auto py_unresolved_channel = py::class_<UnresolvedChannel>(m, "UnresolvedChannel");
 
-        auto unresolved_channel_type_enum = py::enum_<UnresolvedChannel::Type>(
-                                                py_unresolved_channel,
-                                                "Type"
-        )
-                                                .value("URL", UnresolvedChannel::Type::URL)
-                                                .value("PackageURL", UnresolvedChannel::Type::PackageURL)
-                                                .value("Path", UnresolvedChannel::Type::Path)
-                                                .value("PackagePath", UnresolvedChannel::Type::PackagePath)
-                                                .value("Name", UnresolvedChannel::Type::Name)
-                                                .value("Unknown", UnresolvedChannel::Type::Unknown);
-        unresolved_channel_type_enum.def(py::init(
-            [unresolved_channel_type_enum](const py::str& name)
-            { return enum_from_str<UnresolvedChannel::Type>(name, unresolved_channel_type_enum); }
-        ));
+        py::native_enum<UnresolvedChannel::Type>(py_unresolved_channel, "Type", "enum.Enum")
+            .value("URL", UnresolvedChannel::Type::URL)
+            .value("PackageURL", UnresolvedChannel::Type::PackageURL)
+            .value("Path", UnresolvedChannel::Type::Path)
+            .value("PackagePath", UnresolvedChannel::Type::PackagePath)
+            .value("Name", UnresolvedChannel::Type::Name)
+            .value("Unknown", UnresolvedChannel::Type::Unknown)
+            .export_values()
+            .finalize();
         py::implicitly_convertible<py::str, UnresolvedChannel::Type>();
 
         py_unresolved_channel  //
@@ -449,14 +443,12 @@ namespace mambapy
             .def("__copy__", &copy<BasicHTTPAuthentication>)
             .def("__deepcopy__", &deepcopy<BasicHTTPAuthentication>, py::arg("memo"));
 
-        auto channel_match_enum = py::enum_<Channel::Match>(py_channel, "Match")
-                                      .value("No", Channel::Match::No)
-                                      .value("InOtherPlatform", Channel::Match::InOtherPlatform)
-                                      .value("Full", Channel::Match::Full);
-        channel_match_enum.def(
-            py::init([channel_match_enum](const py::str& name)
-                     { return enum_from_str<Channel::Match>(name, channel_match_enum); })
-        );
+        py::native_enum<Channel::Match>(py_channel, "Match", "enum.Enum")
+            .value("No", Channel::Match::No)
+            .value("InOtherPlatform", Channel::Match::InOtherPlatform)
+            .value("Full", Channel::Match::Full)
+            .export_values()
+            .finalize();
         py::implicitly_convertible<py::str, Channel::Match>();
 
         py_channel  //
diff --git a/libmambapy/src/libmambapy/bindings/utils.cpp b/libmambapy/src/libmambapy/bindings/utils.cpp
index e142588c35..3de6f9feb9 100644
--- a/libmambapy/src/libmambapy/bindings/utils.cpp
+++ b/libmambapy/src/libmambapy/bindings/utils.cpp
@@ -8,6 +8,7 @@
 #include <variant>
 
 #include <fmt/color.h>
+#include <pybind11/native_enum.h>
 #include <pybind11/pybind11.h>
 #include <pybind11/stl.h>
 #include <pybind11/stl_bind.h>
@@ -57,42 +58,38 @@ namespace mambapy
     {
         namespace py = pybind11;
 
-        auto text_emphasis_enum = py::enum_<fmt::emphasis>(m, "TextEmphasis")
-                                      .value("Bold", fmt::emphasis::bold)
-                                      .value("Faint", fmt::emphasis::faint)
-                                      .value("Italic", fmt::emphasis::italic)
-                                      .value("Underline", fmt::emphasis::underline)
-                                      .value("Blink", fmt::emphasis::blink)
-                                      .value("Reverse", fmt::emphasis::reverse)
-                                      .value("Conceal", fmt::emphasis::conceal)
-                                      .value("Strikethrough", fmt::emphasis::strikethrough);
-        text_emphasis_enum.def(
-            py::init([text_emphasis_enum](const py::str& name)
-                     { return enum_from_str<fmt::emphasis>(name, text_emphasis_enum); })
-        );
+        py::native_enum<fmt::emphasis>(m, "TextEmphasis", "enum.IntEnum")
+            .value("Bold", fmt::emphasis::bold)
+            .value("Faint", fmt::emphasis::faint)
+            .value("Italic", fmt::emphasis::italic)
+            .value("Underline", fmt::emphasis::underline)
+            .value("Blink", fmt::emphasis::blink)
+            .value("Reverse", fmt::emphasis::reverse)
+            .value("Conceal", fmt::emphasis::conceal)
+            .value("Strikethrough", fmt::emphasis::strikethrough)
+            .export_values()
+            .finalize();
         py::implicitly_convertible<py::str, fmt::emphasis>();
 
-        auto text_terminal_color_enum = py::enum_<fmt::terminal_color>(m, "TextTerminalColor")
-                                            .value("Black", fmt::terminal_color::black)
-                                            .value("Red", fmt::terminal_color::red)
-                                            .value("Green", fmt::terminal_color::green)
-                                            .value("Yellow", fmt::terminal_color::yellow)
-                                            .value("Blue", fmt::terminal_color::blue)
-                                            .value("Magenta", fmt::terminal_color::magenta)
-                                            .value("Cyan", fmt::terminal_color::cyan)
-                                            .value("White", fmt::terminal_color::white)
-                                            .value("BrightBlack", fmt::terminal_color::bright_black)
-                                            .value("BrightRed", fmt::terminal_color::bright_red)
-                                            .value("BrightGreen", fmt::terminal_color::bright_green)
-                                            .value("BrightYellow", fmt::terminal_color::bright_yellow)
-                                            .value("BrightBlue", fmt::terminal_color::bright_blue)
-                                            .value("BrightMagenta", fmt::terminal_color::bright_magenta)
-                                            .value("BrightCyan", fmt::terminal_color::bright_cyan)
-                                            .value("BrightWhite", fmt::terminal_color::bright_white);
-        text_terminal_color_enum.def(
-            py::init([text_terminal_color_enum](const py::str& name)
-                     { return enum_from_str<fmt::terminal_color>(name, text_terminal_color_enum); })
-        );
+        py::native_enum<fmt::terminal_color>(m, "TextTerminalColor", "enum.IntEnum")
+            .value("Black", fmt::terminal_color::black)
+            .value("Red", fmt::terminal_color::red)
+            .value("Green", fmt::terminal_color::green)
+            .value("Yellow", fmt::terminal_color::yellow)
+            .value("Blue", fmt::terminal_color::blue)
+            .value("Magenta", fmt::terminal_color::magenta)
+            .value("Cyan", fmt::terminal_color::cyan)
+            .value("White", fmt::terminal_color::white)
+            .value("BrightBlack", fmt::terminal_color::bright_black)
+            .value("BrightRed", fmt::terminal_color::bright_red)
+            .value("BrightGreen", fmt::terminal_color::bright_green)
+            .value("BrightYellow", fmt::terminal_color::bright_yellow)
+            .value("BrightBlue", fmt::terminal_color::bright_blue)
+            .value("BrightMagenta", fmt::terminal_color::bright_magenta)
+            .value("BrightCyan", fmt::terminal_color::bright_cyan)
+            .value("BrightWhite", fmt::terminal_color::bright_white)
+            .export_values()
+            .finalize();
         py::implicitly_convertible<py::str, fmt::terminal_color>();
 
         py::class_<fmt::rgb>(m, "TextRGBColor")

From 8aa911e13adcfb9aa9682bee8bb9c65c072df8dd Mon Sep 17 00:00:00 2001
From: Julien Jerphanion <git@jjerphan.xyz>
Date: Thu, 7 Aug 2025 09:22:48 +0200
Subject: [PATCH 4/4] Do not export enums' values

Signed-off-by: Julien Jerphanion <git@jjerphan.xyz>

Co-authored-by: Antoine Prouvost <AntoinePrv@users.noreply.github.com>
---
 libmambapy/src/libmambapy/bindings/legacy.cpp         | 2 --
 libmambapy/src/libmambapy/bindings/solver_libsolv.cpp | 6 ------
 libmambapy/src/libmambapy/bindings/specs.cpp          | 5 -----
 libmambapy/src/libmambapy/bindings/utils.cpp          | 2 --
 4 files changed, 15 deletions(-)

diff --git a/libmambapy/src/libmambapy/bindings/legacy.cpp b/libmambapy/src/libmambapy/bindings/legacy.cpp
index c054927a1a..04caffd242 100644
--- a/libmambapy/src/libmambapy/bindings/legacy.cpp
+++ b/libmambapy/src/libmambapy/bindings/legacy.cpp
@@ -1489,7 +1489,6 @@ bind_submodule_impl(pybind11::module_ m)
         .value("Search", QueryType::Search)
         .value("Depends", QueryType::Depends)
         .value("WhoNeeds", QueryType::WhoNeeds)
-        .export_values()
         .finalize();
     py::implicitly_convertible<py::str, QueryType>();
 
@@ -1501,7 +1500,6 @@ bind_submodule_impl(pybind11::module_ m)
         .value("Table", QueryResultFormat::Table)
         .value("Pretty", QueryResultFormat::Pretty)
         .value("RecursiveTable", QueryResultFormat::RecursiveTable)
-        .export_values()
         .finalize();
     py::implicitly_convertible<py::str, QueryResultFormat>();
 
diff --git a/libmambapy/src/libmambapy/bindings/solver_libsolv.cpp b/libmambapy/src/libmambapy/bindings/solver_libsolv.cpp
index de46674a22..2d537dfd61 100644
--- a/libmambapy/src/libmambapy/bindings/solver_libsolv.cpp
+++ b/libmambapy/src/libmambapy/bindings/solver_libsolv.cpp
@@ -33,7 +33,6 @@ namespace mambapy
         py::native_enum<RepodataParser>(m, "RepodataParser", "enum.Enum")
             .value("Mamba", RepodataParser::Mamba)
             .value("Libsolv", RepodataParser::Libsolv)
-            .export_values()
             .finalize();
         py::implicitly_convertible<py::str, RepodataParser>();
 
@@ -41,14 +40,12 @@ namespace mambapy
             .value("Mixed", MatchSpecParser::Mixed)
             .value("Mamba", MatchSpecParser::Mamba)
             .value("Libsolv", MatchSpecParser::Libsolv)
-            .export_values()
             .finalize();
         py::implicitly_convertible<py::str, MatchSpecParser>();
 
         py::native_enum<PipAsPythonDependency>(m, "PipAsPythonDependency", "enum.Enum")
             .value("No", PipAsPythonDependency::No)
             .value("Yes", PipAsPythonDependency::Yes)
-            .export_values()
             .finalize();
         py::implicitly_convertible<py::bool_, PipAsPythonDependency>();
 
@@ -57,14 +54,12 @@ namespace mambapy
             .value("TarBz2Only", PackageTypes::TarBz2Only)
             .value("CondaAndTarBz2", PackageTypes::CondaAndTarBz2)
             .value("CondaOrElseTarBz2", PackageTypes::CondaOrElseTarBz2)
-            .export_values()
             .finalize();
         py::implicitly_convertible<py::str, PackageTypes>();
 
         py::native_enum<VerifyPackages>(m, "VerifyPackages", "enum.Enum")
             .value("No", VerifyPackages::No)
             .value("Yes", VerifyPackages::Yes)
-            .export_values()
             .finalize();
         py::implicitly_convertible<py::bool_, VerifyPackages>();
 
@@ -73,7 +68,6 @@ namespace mambapy
             .value("Warning", LogLevel::Warning)
             .value("Error", LogLevel::Error)
             .value("Fatal", LogLevel::Fatal)
-            .export_values()
             .finalize();
         py::implicitly_convertible<py::bool_, LogLevel>();
 
diff --git a/libmambapy/src/libmambapy/bindings/specs.cpp b/libmambapy/src/libmambapy/bindings/specs.cpp
index 6c08ee114a..da0991f331 100644
--- a/libmambapy/src/libmambapy/bindings/specs.cpp
+++ b/libmambapy/src/libmambapy/bindings/specs.cpp
@@ -82,7 +82,6 @@ namespace mambapy
             .value("win_64", KnownPlatform::win_64)
             .value("win_arm64", KnownPlatform::win_arm64)
             .value("zos_z", KnownPlatform::zos_z)
-            .export_values()
             .finalize();
         py::implicitly_convertible<py::str, KnownPlatform>();
 
@@ -94,7 +93,6 @@ namespace mambapy
             .value("No", NoArchType::No)
             .value("Generic", NoArchType::Generic)
             .value("Python", NoArchType::Python)
-            .export_values()
             .finalize();
         py::implicitly_convertible<py::str, NoArchType>();
 
@@ -107,7 +105,6 @@ namespace mambapy
             .value("Hide", CondaURL::Credentials::Hide)
             .value("Show", CondaURL::Credentials::Show)
             .value("Remove", CondaURL::Credentials::Remove)
-            .export_values()
             .finalize();
         py::implicitly_convertible<py::str, CondaURL::Credentials>();
 
@@ -328,7 +325,6 @@ namespace mambapy
             .value("PackagePath", UnresolvedChannel::Type::PackagePath)
             .value("Name", UnresolvedChannel::Type::Name)
             .value("Unknown", UnresolvedChannel::Type::Unknown)
-            .export_values()
             .finalize();
         py::implicitly_convertible<py::str, UnresolvedChannel::Type>();
 
@@ -447,7 +443,6 @@ namespace mambapy
             .value("No", Channel::Match::No)
             .value("InOtherPlatform", Channel::Match::InOtherPlatform)
             .value("Full", Channel::Match::Full)
-            .export_values()
             .finalize();
         py::implicitly_convertible<py::str, Channel::Match>();
 
diff --git a/libmambapy/src/libmambapy/bindings/utils.cpp b/libmambapy/src/libmambapy/bindings/utils.cpp
index 3de6f9feb9..1898b52cf2 100644
--- a/libmambapy/src/libmambapy/bindings/utils.cpp
+++ b/libmambapy/src/libmambapy/bindings/utils.cpp
@@ -67,7 +67,6 @@ namespace mambapy
             .value("Reverse", fmt::emphasis::reverse)
             .value("Conceal", fmt::emphasis::conceal)
             .value("Strikethrough", fmt::emphasis::strikethrough)
-            .export_values()
             .finalize();
         py::implicitly_convertible<py::str, fmt::emphasis>();
 
@@ -88,7 +87,6 @@ namespace mambapy
             .value("BrightMagenta", fmt::terminal_color::bright_magenta)
             .value("BrightCyan", fmt::terminal_color::bright_cyan)
             .value("BrightWhite", fmt::terminal_color::bright_white)
-            .export_values()
             .finalize();
         py::implicitly_convertible<py::str, fmt::terminal_color>();
 
